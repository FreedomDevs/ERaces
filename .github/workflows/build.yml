name: Build and Release on Version Change
permissions:
  contents: write

on:
  push:
    branches:
      - master

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.changed }}
      version_after: ${{ steps.check.outputs.version_after }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check version change in build.gradle.kts
        id: check
        run: |
          # Получаем build.gradle.kts из предыдущего коммита
          git show HEAD~1:build.gradle.kts > old_build.gradle.kts

          # Извлекаем версию
          version_before=$(grep '^version = ' old_build.gradle.kts | sed -E 's/version = "(.*)"/\1/' || echo "undefined")
          version_after=$(grep '^version = ' build.gradle.kts     | sed -E 's/version = "(.*)"/\1/' || echo "undefined")

          echo "Old version: $version_before"
          echo "New version: $version_after"

          if [ "$version_before" != "$version_after" ] && [ "$version_after" != "undefined" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

          echo "version_after=$version_after" >> "$GITHUB_OUTPUT"

  build_and_release:
    needs: check-version-change
    if: needs.check-version-change.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Полная история, все теги


      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Build project with Gradle
        run: ./gradlew clean build

      - name: Get commits since previous release
        id: commits
        run: |
          # Получаем последний тег перед текущим
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Previous tag: $PREV_TAG"

          # Берем все коммиты с предыдущего тега
          COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"- %s")

          # Безопасная запись в GITHUB_OUTPUT
          echo "commits<<EOF" >> "$GITHUB_OUTPUT"
          echo "$COMMITS" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"


      - name: Create GitHub Release with artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version-change.outputs.version_after }}
          name: Release v${{ needs.check-version-change.outputs.version_after }}
          body: |
            Автоматический релиз версии ${{ needs.check-version-change.outputs.version_after }}

            Последние коммиты:
            ${{ steps.commits.outputs.commits }}
          files: build/libs/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
